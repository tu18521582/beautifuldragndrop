[{"/home/tu/dragndrop/dragndrop/src/index.js":"1","/home/tu/dragndrop/dragndrop/src/App.js":"2","/home/tu/dragndrop/dragndrop/src/reportWebVitals.js":"3","/home/tu/dragndrop/dragndrop/src/initialData.js":"4","/home/tu/dragndrop/dragndrop/src/Column.js":"5","/home/tu/dragndrop/dragndrop/src/Task.js":"6"},{"size":478,"mtime":1607572047269,"results":"7","hashOfConfig":"8"},{"size":3475,"mtime":1607651449282,"results":"9","hashOfConfig":"8"},{"size":362,"mtime":1607566311154,"results":"10","hashOfConfig":"8"},{"size":823,"mtime":1607590724153,"results":"11","hashOfConfig":"8"},{"size":1793,"mtime":1607650755084,"results":"12","hashOfConfig":"8"},{"size":1087,"mtime":1607591423319,"results":"13","hashOfConfig":"8"},{"filePath":"14","messages":"15","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},"1irlcbx",{"filePath":"17","messages":"18","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"19","usedDeprecatedRules":"16"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"26","usedDeprecatedRules":"16"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"29","usedDeprecatedRules":"30"},"/home/tu/dragndrop/dragndrop/src/index.js",[],["31","32"],"/home/tu/dragndrop/dragndrop/src/App.js",["33"],"import React, {useState} from 'react';\nimport '@atlaskit/css-reset';\nimport {DragDropContext, Droppable} from 'react-beautiful-dnd';\nimport Column from './Column';\nimport initialData from './initialData';\nimport styled from 'styled-components';\nfunction App() {\n    const Container = styled.div`\n        display: flex;\n    `;\n\n\n    const [state, setState] = useState(initialData);\n    const column = state.columns;\n\n    const onDragEnd = result => {\n        const { destination, source, draggableId, type } = result;\n\n        if (!destination) {\n            return;\n        }\n        //keo va tha cung 1 vi tri\n        if (\n            destination.droppableId === source.droppableId &&\n            destination.index === source.index\n        ) {\n            return;\n        }\n\n\n        if (type === \"column\") {\n            const newColumnOrder = Array.from(state.columnOrder);\n            newColumnOrder.splice(source.index, 1);\n            newColumnOrder.splice(destination.index, 0, draggableId);\n            \n            const newState = {\n                ...state,\n                columnOrder: newColumnOrder\n            }\n\n            setState(newState);\n            return;\n        }\n\n        const start = state.columns[source.droppableId];\n        const finish = state.columns[destination.droppableId];\n\n        //keo tha cung cot\n        if (start === finish) {\n            const newTaskIds = Array.from(start.taskIds);\n            newTaskIds.splice(source.index, 1);\n            newTaskIds.splice(destination.index, 0 , draggableId);\n\n            const newColumn = {\n                ...start,\n                taskIds: newTaskIds\n            };\n\n            setState(prevState=>({\n                ...prevState,\n                columns: {\n                    ...prevState.columns,\n                    [newColumn.id]: newColumn,\n                },\n            }))\n            return;\n        }\n        //keo tha khac cot\n\n        const startTaskIds = Array.from(start.taskIds);\n        startTaskIds.splice(source.index,1);\n        const newStart = {\n            ...start,\n            taskIds: startTaskIds\n        };\n\n        const finishTaskIds = Array.from(finish.taskIds);\n        finishTaskIds.splice(destination.index, 0, draggableId);\n\n        const newFinish = {\n            ...finish,\n            taskIds: finishTaskIds\n        }\n\n        const newState = {\n            ...state,\n            columns: {\n                ...state.columns,\n                [newStart.id]: newStart,\n                [newFinish.id]: newFinish\n            }\n        }\n\n        setState(newState);\n\n    }\n    return (\n        <DragDropContext onDragEnd={onDragEnd}>\n            <Droppable droppableId=\"all-columns\" direction=\"horizontal\" type=\"column\">\n                {(provided)=>(\n                    <Container\n                        {...provided.droppableProps}\n                        ref={provided.innerRef}\n                    >\n                        {state.columnOrder.map((columnID, index)=>{\n                            const column = state.columns[columnID];\n                            const tasks = column.taskIds.map(taskId => state.tasks[taskId]);\n                            return <Column key={column.id} column={column} tasks={tasks} index={index}/>;\n                        })}\n                        {provided.placeholder}\n                    </Container>\n                )}\n            </Droppable>\n        </DragDropContext>  \n    );\n}\n\nexport default App;\n\n\n","/home/tu/dragndrop/dragndrop/src/reportWebVitals.js",[],"/home/tu/dragndrop/dragndrop/src/initialData.js",[],"/home/tu/dragndrop/dragndrop/src/Column.js",["34","35","36"],"import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport styled from 'styled-components';\nimport Task from './Task.js';\nimport { Draggable, Droppable } from 'react-beautiful-dnd';\nColumn.propTypes = {\n    \n};\n\nfunction Column(props) {\n    const {column, tasks, index} = props;\n    const [isDraggingOver, setDraggingOver] = useState(false);\n    const Container = styled.div`\n        margin: 8px;\n        border: 1px solid lightgrey;\n        border-radius: 2px;\n        width: 33%;\n        height: fit-content;\n        display: flex;\n        flex-direction: column;\n    `;\n    const Title = styled.h3`\n        padding: 8px;\n    `;\n    const TaskList = styled.div`\n        padding: 8px;        \n    `;\n    return (\n        <Draggable draggableId={column.id} index={index}>\n            {(provided)=>(\n                <Container {...provided.draggableProps} ref={provided.innerRef}>\n                    <Title {...provided.dragHandleProps}>{column.title}</Title>\n                    <Droppable droppableId={column.id} type=\"task\">\n                        {(provided, snapshot)=>{\n                            return (\n                                <TaskList \n                                ref={provided.innerRef}\n                                {...provided.droppableProps}\n                                isDraggingOver={snapshot.isDraggingOver}\n                            >\n                                {tasks.map((task, index)=> <Task key={task.id} task={task} index={index}/>)}\n                                {provided.placeholder}\n                            </TaskList>\n                            )\n                        }}\n                    </Droppable>\n                </Container>\n            )}\n        </Draggable>\n    );\n}\n\nexport default Column;","/home/tu/dragndrop/dragndrop/src/Task.js",["37"],"import React, { useState } from 'react';\nimport { Draggable } from 'react-beautiful-dnd';\nimport styled from 'styled-components';\n\nTask.propTypes = {\n    \n};\n\n\nfunction Task(props) {\n    const {task, index} = props;\n    const [state,setState] = useState(false);\n    const Container = styled.div`\n    border: 1px solid lightgrey;\n    border-radius: 2px;\n    padding: 8px;\n    margin-bottom: 8px;\n    background-color: ${state ? 'lightgreen' : 'white'};\n`; \n\n    return (\n        <Draggable draggableId={task.id} index={index}>\n            {(provided, snapshot)=> {\n                return (\n                    (\n                        <Container \n                            ref={provided.innerRef}\n                            {...provided.dragHandleProps}\n                            {...provided.draggableProps}\n                            isDragging={snapshot.isDragging}\n                        >\n                            {task.content}\n                        </Container>\n                    )\n                )\n            }}\n        </Draggable>\n    );\n}\n\nexport default Task;",["38","39"],{"ruleId":"40","replacedBy":"41"},{"ruleId":"42","replacedBy":"43"},{"ruleId":"44","severity":1,"message":"45","line":14,"column":11,"nodeType":"46","messageId":"47","endLine":14,"endColumn":17},{"ruleId":"44","severity":1,"message":"48","line":2,"column":8,"nodeType":"46","messageId":"47","endLine":2,"endColumn":17},{"ruleId":"44","severity":1,"message":"49","line":12,"column":12,"nodeType":"46","messageId":"47","endLine":12,"endColumn":26},{"ruleId":"44","severity":1,"message":"50","line":12,"column":28,"nodeType":"46","messageId":"47","endLine":12,"endColumn":43},{"ruleId":"44","severity":1,"message":"51","line":12,"column":18,"nodeType":"46","messageId":"47","endLine":12,"endColumn":26},{"ruleId":"40","replacedBy":"52"},{"ruleId":"42","replacedBy":"53"},"no-native-reassign",["54"],"no-negated-in-lhs",["55"],"no-unused-vars","'column' is assigned a value but never used.","Identifier","unusedVar","'PropTypes' is defined but never used.","'isDraggingOver' is assigned a value but never used.","'setDraggingOver' is assigned a value but never used.","'setState' is assigned a value but never used.",["54"],["55"],"no-global-assign","no-unsafe-negation"]